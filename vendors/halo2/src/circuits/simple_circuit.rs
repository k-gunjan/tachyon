use std::marker::PhantomData;

use halo2_proofs::{
    arithmetic::FieldExt,
    circuit::{AssignedCell, Chip, Layouter, Region, SimpleFloorPlanner, Value},
    plonk::{Advice, Circuit, Column, ConstraintSystem, Error, Fixed, Instance, Selector},
    poly::Rotation,
};

// ANCHOR: instructions
trait NumericInstructions<F: FieldExt>: Chip<F> {
    /// Variable representing a number.
    type Num;

    /// Loads a number into the circuit as a private input.
    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> Result<Self::Num, Error>;

    /// Loads a number into the circuit as a fixed constant.
    fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> Result<Self::Num, Error>;

    /// Returns `c = a * b`.
    fn mul(
        &self,
        layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<Self::Num, Error>;

    /// Exposes a number as a public input to the circuit.
    fn expose_public(
        &self,
        layouter: impl Layouter<F>,
        num: Self::Num,
        row: usize,
    ) -> Result<(), Error>;
}
// ANCHOR_END: instructions

// ANCHOR: chip
/// The chip that will implement our instructions! Chips store their own
/// config, as well as type markers if necessary.
struct FieldChip<F: FieldExt> {
    config: FieldConfig,
    _marker: PhantomData<F>,
}
// ANCHOR_END: chip

// ANCHOR: chip-config
/// Chip state is stored in a config struct. This is generated by the chip
/// during configuration, and then stored inside the chip.
#[derive(Clone, Debug)]
pub struct FieldConfig {
    /// For this chip, we will use two advice columns to implement our instructions.
    /// These are also the columns through which we communicate with other parts of
    /// the circuit.
    advice: [Column<Advice>; 2],

    /// This is the public input (instance) column.
    instance: Column<Instance>,

    // We need a selector to enable the multiplication gate, so that we aren't placing
    // any constraints on cells where `NumericInstructions::mul` is not being used.
    // This is important when building larger circuits, where columns are used by
    // multiple sets of instructions.
    s_mul: Selector,
}

impl<F: FieldExt> FieldChip<F> {
    fn construct(config: <Self as Chip<F>>::Config) -> Self {
        Self {
            config,
            _marker: PhantomData,
        }
    }

    fn configure(
        meta: &mut ConstraintSystem<F>,
        advice: [Column<Advice>; 2],
        instance: Column<Instance>,
        constant: Column<Fixed>,
    ) -> <Self as Chip<F>>::Config {
        meta.enable_equality(instance);
        meta.enable_constant(constant);
        for column in &advice {
            meta.enable_equality(*column);
        }
        let s_mul = meta.selector();

        // Define our multiplication gate!
        meta.create_gate("mul", |meta| {
            // To implement multiplication, we need three advice cells and a selector
            // cell. We arrange them like so:
            //
            // | a0  | a1  | s_mul |
            // |-----|-----|-------|
            // | lhs | rhs | s_mul |
            // | out |     |       |
            //
            // Gates may refer to any relative offsets we want, but each distinct
            // offset adds a cost to the proof. The most common offsets are 0 (the
            // current row), 1 (the next row), and -1 (the previous row), for which
            // `Rotation` has specific constructors.
            let lhs = meta.query_advice(advice[0], Rotation::cur());
            let rhs = meta.query_advice(advice[1], Rotation::cur());
            let out = meta.query_advice(advice[0], Rotation::next());
            let s_mul = meta.query_selector(s_mul);

            // Finally, we return the polynomial expressions that constrain this gate.
            // For our multiplication gate, we only need a single polynomial constraint.
            //
            // The polynomial expressions returned from `create_gate` will be
            // constrained by the proving system to equal zero. Our expression
            // has the following properties:
            // - When s_mul = 0, any value is allowed in lhs, rhs, and out.
            // - When s_mul != 0, this constrains lhs * rhs = out.
            vec![s_mul * (lhs * rhs - out)]
        });

        FieldConfig {
            advice,
            instance,
            s_mul,
        }
    }
}
// ANCHOR_END: chip-config

// ANCHOR: chip-impl
impl<F: FieldExt> Chip<F> for FieldChip<F> {
    type Config = FieldConfig;
    type Loaded = ();

    fn config(&self) -> &Self::Config {
        &self.config
    }

    fn loaded(&self) -> &Self::Loaded {
        &()
    }
}
// ANCHOR_END: chip-impl

// ANCHOR: instructions-impl
/// A variable representing a number.
#[derive(Clone)]
struct Number<F: FieldExt>(AssignedCell<F, F>);

impl<F: FieldExt> NumericInstructions<F> for FieldChip<F> {
    type Num = Number<F>;

    fn load_private(
        &self,
        mut layouter: impl Layouter<F>,
        value: Value<F>,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load private",
            |mut region| {
                region
                    .assign_advice(|| "private input", config.advice[0], 0, || value)
                    .map(Number)
            },
        )
    }

    fn load_constant(
        &self,
        mut layouter: impl Layouter<F>,
        constant: F,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load constant",
            |mut region| {
                region
                    .assign_advice_from_constant(|| "constant value", config.advice[0], 0, constant)
                    .map(Number)
            },
        )
    }

    fn mul(
        &self,
        mut layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "mul",
            |mut region: Region<'_, F>| {
                // We only want to use a single multiplication gate in this region,
                // so we enable it at region offset 0; this means it will constrain
                // cells at offsets 0 and 1.
                config.s_mul.enable(&mut region, 0)?;

                // The inputs we've been given could be located anywhere in the circuit,
                // but we can only rely on relative offsets inside this region. So we
                // assign new cells inside the region and constrain them to have the
                // same values as the inputs.
                a.0.copy_advice(|| "lhs", &mut region, config.advice[0], 0)?;
                b.0.copy_advice(|| "rhs", &mut region, config.advice[1], 0)?;

                // Now we can assign the multiplication result, which is to be assigned
                // into the output position.
                let value = a.0.value().copied() * b.0.value();

                // Finally, we do the assignment to the output, returning a
                // variable to be used in another part of the circuit.
                region
                    .assign_advice(|| "lhs * rhs", config.advice[0], 1, || value)
                    .map(Number)
            },
        )
    }

    fn expose_public(
        &self,
        mut layouter: impl Layouter<F>,
        num: Self::Num,
        row: usize,
    ) -> Result<(), Error> {
        let config = self.config();

        layouter.constrain_instance(num.0.cell(), config.instance, row)
    }
}
// ANCHOR_END: instructions-impl

// ANCHOR: circuit
/// The full circuit implementation.
///
/// In this struct we store the private input variables. We use `Option<F>` because
/// they won't have any value during key generation. During proving, if any of these
/// were `None` we would get an error.
#[derive(Clone, Default)]
pub struct SimpleCircuit<F: FieldExt> {
    pub constant: F,
    pub a: Value<F>,
    pub b: Value<F>,
}

impl<F: FieldExt> Circuit<F> for SimpleCircuit<F> {
    // Since we are using a single chip for everything, we can just reuse its config.
    type Config = FieldConfig;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        // We create the two advice columns that FieldChip uses for I/O.
        let advice = [meta.advice_column(), meta.advice_column()];

        // We also need an instance column to store public inputs.
        let instance = meta.instance_column();

        // Create a fixed column to load constants.
        let constant = meta.fixed_column();

        FieldChip::configure(meta, advice, instance, constant)
    }

    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        let field_chip = FieldChip::<F>::construct(config);

        // Load our private values into the circuit.
        let a = field_chip.load_private(layouter.namespace(|| "load a"), self.a)?;
        let b = field_chip.load_private(layouter.namespace(|| "load b"), self.b)?;

        // Load the constant factor into the circuit.
        let constant =
            field_chip.load_constant(layouter.namespace(|| "load constant"), self.constant)?;

        // We only have access to plain multiplication.
        // We could implement our circuit as:
        //     asq  = a*a
        //     bsq  = b*b
        //     absq = asq*bsq
        //     c    = constant*asq*bsq
        //
        // but it's more efficient to implement it as:
        //     ab   = a*b
        //     absq = (ab)Â²
        //     c    = constant*absq
        let ab = field_chip.mul(layouter.namespace(|| "a * b"), a, b)?;
        let absq = field_chip.mul(layouter.namespace(|| "ab * ab"), ab.clone(), ab)?;
        let c = field_chip.mul(layouter.namespace(|| "constant * absq"), constant, absq)?;

        // Expose the result as a public input to the circuit.
        field_chip.expose_public(layouter.namespace(|| "expose c"), c, 0)
    }
}
// ANCHOR_END: circuit

#[cfg(test)]
mod test {
    use halo2_proofs::{
        circuit::Value,
        plonk::keygen_pk2,
        poly::kzg::{
            commitment::{KZGCommitmentScheme, ParamsKZG},
            multiopen::{ProverGWC, ProverSHPLONK},
        },
        transcript::{Blake2bWrite, Challenge255, PoseidonWrite, TranscriptWriterBuffer},
    };
    use halo2curves::bn256::{Bn256, Fr, G1Affine};
    use rand_core::SeedableRng;

    use crate::{
        bn254::{
            Blake2bWrite as TachyonBlake2bWrite, GWCProver, PoseidonWrite as TachyonPoseidonWrite,
            ProvingKey as TachyonProvingKey, SHPlonkProver, Sha256Write as TachyonSha256Write,
            TachyonProver,
        },
        circuits::simple_circuit::SimpleCircuit,
        consts::{TranscriptType, SEED},
        prover::create_proof as tachyon_create_proof,
        sha::ShaWrite,
        xor_shift_rng::XORShiftRng,
    };

    #[test]
    fn test_create_gwc_proof() {
        // ANCHOR: test-circuit
        // The number of rows in our circuit cannot exceed 2áµ. Since our example
        // circuit is very small, we can pick a very small value here.
        let k = 4;

        // Prepare the private and public inputs to the circuit!
        let constant = Fr::from(7);
        let a = Fr::from(2);
        let b = Fr::from(3);
        let c = constant * a.square() * b.square();

        // Instantiate the circuit with the private inputs.
        let circuit = SimpleCircuit {
            constant,
            a: Value::known(a),
            b: Value::known(b),
        };

        // Arrange the public input. We expose the multiplication result in row 0
        // of the instance column, so we position it there in our public inputs.
        let public_inputs = vec![c];
        let public_inputs2 = vec![&public_inputs[..]];
        let public_inputs3 = vec![&public_inputs2[..], &public_inputs2[..]];

        // Given the correct public input, our circuit will verify.
        let s = Fr::from(2);
        let params = ParamsKZG::<Bn256>::unsafe_setup_with_s(k, s.clone());
        let pk = keygen_pk2(&params, &circuit).expect("vk should not fail");

        let rng = XORShiftRng::from_seed(SEED);

        let halo2_proof = {
            let mut transcript = Blake2bWrite::<_, G1Affine, Challenge255<_>>::init(vec![]);

            halo2_proofs::plonk::create_proof::<
                KZGCommitmentScheme<Bn256>,
                ProverGWC<_>,
                _,
                _,
                _,
                _,
            >(
                &params,
                &pk,
                &[circuit.clone(), circuit.clone()],
                public_inputs3.as_slice(),
                rng.clone(),
                &mut transcript,
            )
            .expect("proof generation should not fail");

            transcript.finalize()
        };

        let tachyon_proof = {
            let mut prover =
                GWCProver::<KZGCommitmentScheme<Bn256>>::new(TranscriptType::Blake2b as u8, k, &s);

            let mut tachyon_pk = {
                let mut pk_bytes: Vec<u8> = vec![];
                pk.write(&mut pk_bytes, halo2_proofs::SerdeFormat::RawBytesUnchecked)
                    .unwrap();
                drop(pk);
                TachyonProvingKey::from(pk_bytes.as_slice())
            };
            let mut transcript = TachyonBlake2bWrite::init(vec![]);

            tachyon_create_proof::<_, _, _, _, _, _>(
                &mut prover,
                &mut tachyon_pk,
                &[circuit.clone(), circuit],
                public_inputs3.as_slice(),
                rng,
                &mut transcript,
            )
            .expect("proof generation should not fail");

            let mut proof = transcript.finalize();
            let proof_last = prover.get_proof();
            proof.extend_from_slice(&proof_last);
            proof
        };
        assert_eq!(halo2_proof, tachyon_proof);
        // ANCHOR_END: test-circuit
    }

    #[test]
    fn test_create_shplonk_proof_with_various_transcripts() {
        // ANCHOR: test-circuit
        // The number of rows in our circuit cannot exceed 2áµ. Since our example
        // circuit is very small, we can pick a very small value here.
        let k = 4;

        // Prepare the private and public inputs to the circuit!
        let constant = Fr::from(7);
        let a = Fr::from(2);
        let b = Fr::from(3);
        let c = constant * a.square() * b.square();

        // Instantiate the circuit with the private inputs.
        let circuit = SimpleCircuit {
            constant,
            a: Value::known(a),
            b: Value::known(b),
        };

        // Arrange the public input. We expose the multiplication result in row 0
        // of the instance column, so we position it there in our public inputs.
        let public_inputs = vec![c];
        let public_inputs2 = vec![&public_inputs[..]];
        let public_inputs3 = vec![&public_inputs2[..], &public_inputs2[..]];

        // Given the correct public input, our circuit will verify.
        let s = Fr::from(2);
        let params = ParamsKZG::<Bn256>::unsafe_setup_with_s(k, s.clone());
        let pk = keygen_pk2(&params, &circuit).expect("vk should not fail");
        let mut pk_bytes: Vec<u8> = vec![];
        pk.write(&mut pk_bytes, halo2_proofs::SerdeFormat::RawBytesUnchecked)
            .unwrap();

        let rng = XORShiftRng::from_seed(SEED);

        let halo2_blake2b_proof = {
            let mut transcript = Blake2bWrite::<_, G1Affine, Challenge255<_>>::init(vec![]);

            halo2_proofs::plonk::create_proof::<
                KZGCommitmentScheme<Bn256>,
                ProverSHPLONK<_>,
                _,
                _,
                _,
                _,
            >(
                &params,
                &pk,
                &[circuit.clone(), circuit.clone()],
                public_inputs3.as_slice(),
                rng.clone(),
                &mut transcript,
            )
            .expect("proof generation should not fail");

            transcript.finalize()
        };

        let tachyon_blake2b_proof = {
            let mut prover = SHPlonkProver::<KZGCommitmentScheme<Bn256>>::new(
                TranscriptType::Blake2b as u8,
                k,
                &s,
            );

            let mut tachyon_pk = TachyonProvingKey::from(pk_bytes.as_slice());
            let mut transcript = TachyonBlake2bWrite::init(vec![]);

            tachyon_create_proof::<_, _, _, _, _, _>(
                &mut prover,
                &mut tachyon_pk,
                &[circuit.clone(), circuit.clone()],
                public_inputs3.as_slice(),
                rng.clone(),
                &mut transcript,
            )
            .expect("proof generation should not fail");

            let mut proof = transcript.finalize();
            let proof_last = prover.get_proof();
            proof.extend_from_slice(&proof_last);
            proof
        };
        assert_eq!(halo2_blake2b_proof, tachyon_blake2b_proof);

        let halo2_poseidon_proof = {
            let mut transcript = PoseidonWrite::<_, G1Affine, Challenge255<_>>::init(vec![]);

            halo2_proofs::plonk::create_proof::<
                KZGCommitmentScheme<Bn256>,
                ProverSHPLONK<_>,
                _,
                _,
                _,
                _,
            >(
                &params,
                &pk,
                &[circuit.clone(), circuit.clone()],
                public_inputs3.as_slice(),
                rng.clone(),
                &mut transcript,
            )
            .expect("proof generation should not fail");

            transcript.finalize()
        };

        let tachyon_poseidon_proof = {
            let mut prover = SHPlonkProver::<KZGCommitmentScheme<Bn256>>::new(
                TranscriptType::Poseidon as u8,
                k,
                &s,
            );

            let mut tachyon_pk = TachyonProvingKey::from(pk_bytes.as_slice());
            let mut transcript = TachyonPoseidonWrite::init(vec![]);

            tachyon_create_proof::<_, _, _, _, _, _>(
                &mut prover,
                &mut tachyon_pk,
                &[circuit.clone(), circuit.clone()],
                public_inputs3.as_slice(),
                rng.clone(),
                &mut transcript,
            )
            .expect("proof generation should not fail");

            let mut proof = transcript.finalize();
            let proof_last = prover.get_proof();
            proof.extend_from_slice(&proof_last);
            proof
        };
        assert_eq!(halo2_poseidon_proof, tachyon_poseidon_proof);

        let halo2_sha256_proof = {
            let mut transcript =
                ShaWrite::<_, G1Affine, Challenge255<_>, sha2::Sha256>::init(vec![]);

            halo2_proofs::plonk::create_proof::<
                KZGCommitmentScheme<Bn256>,
                ProverSHPLONK<_>,
                _,
                _,
                _,
                _,
            >(
                &params,
                &pk,
                &[circuit.clone(), circuit.clone()],
                public_inputs3.as_slice(),
                rng.clone(),
                &mut transcript,
            )
            .expect("proof generation should not fail");

            transcript.finalize()
        };

        let tachyon_sha256_proof = {
            let mut prover = SHPlonkProver::<KZGCommitmentScheme<Bn256>>::new(
                TranscriptType::Sha256 as u8,
                k,
                &s,
            );

            let mut tachyon_pk = TachyonProvingKey::from(pk_bytes.as_slice());
            let mut transcript = TachyonSha256Write::init(vec![]);

            tachyon_create_proof::<_, _, _, _, _, _>(
                &mut prover,
                &mut tachyon_pk,
                &[circuit.clone(), circuit],
                public_inputs3.as_slice(),
                rng,
                &mut transcript,
            )
            .expect("proof generation should not fail");

            let mut proof = transcript.finalize();
            let proof_last = prover.get_proof();
            proof.extend_from_slice(&proof_last);
            proof
        };
        assert_eq!(halo2_sha256_proof, tachyon_sha256_proof);
        // ANCHOR_END: test-circuit
    }
}
